# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-27 08:59
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    def add_base_document(self, schema_editor):
        self.get_model("ratings", "BaseDocument").objects.create(
            kind=1,
            description='Распоряжение префектуры САО от 08.09.2016 №532',
            description_imp='распоряжением префектуры САО от 08.09.2016 №532'
        )

    def add_signer_text(self, schema_editor):
        self.get_model("ratings", "SignerText").objects.create(
            text='УТВЕРЖДАЮ\nПервый заместитель префекта\nСеверного административного округа\nгорода Москвы\n\n___________________А.А.Велиховский',
            is_active=True
        )

    def add_base_rating_components(self, schema_editor):
        manager = self.get_model("ratings", "RatingComponent").objects
        base_document = self.get_model("ratings", "BaseDocument").objects.get(
            description='Распоряжение префектуры САО от 08.09.2016 №532')
        manager.create(
            number=1,
            base_document=base_document,
            name='Результаты работы района по данным ОАТИ города Москвы.',
            base_description='Показатель формируется на основании еженедельных отчетов ОАТИ по количеству выявленных нарушений (зеленой инспекции, инспекции по благоустройству).',
            weight=10,
            sub_components_display_type=1,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=2,
            base_document=base_document,
            name='Результаты работы района по данным Мосжилинспекции.',
            base_description='На основании еженедельных отчетов ЖИ по САО указывается процент выявленных нарушений (количество МКД с нарушениями/общее количество МКД в районе).',
            weight=10,
            sub_components_display_type=2,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=3,
            base_document=base_document,
            name='Исполнительская дисциплина.',
            base_description='Показатель формируется на основании ежемесячного отчета по возвращенным на доработку документам в управы районов в Системе ЭДО.',
            weight=10,
            sub_components_display_type=1,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=4,
            base_document=base_document,
            name='Телеметрический контроль за работой коммунальной техники.',
            base_description='Отчет о посещении коммунально-уборочной техникой площади проезжей части, тротуаров ОДХ и ДТ и выполнение технологических операций в соответствии с факсограммами КГХ по данным портала monitor.mos.ru.',
            weight=10,
            sub_components_display_type=2,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=5,
            base_document=base_document,
            name='Санитарное и техническое состояние коммунальной техники и средств малой механизации ГБУ "Жилищник" районов.',
            base_description='Количество техники находящейся в ремонте, не пройденного ТО и ГТО на основании проверок и информации представляемой ГБУ "Доринвест".',
            weight=10,
            sub_components_display_type=1,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=6,
            base_document=base_document,
            name='Ремонт подъездов.',
            base_description='Показатель формируется по еженедельным отчетам МЖИ по различным показателям.',
            weight=10,
            sub_components_display_type=2,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=7,
            base_document=base_document,
            name='Выполнение программы благоустройства дворовых и иных территорий.',
            base_description='Внесение данных по программам благоустройства в ИАС МКР.',
            weight=1,
            sub_components_display_type=1,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=8,
            base_document=base_document,
            name='Подготовка  жилого фонда и прочих строений к эксплуатации в зимних\летних условиях.',
            base_description='Подготовка жилого фонда и прочих строений к ОЗП.',
            weight=10,
            sub_components_display_type=2,
            valid_from_month=2,
            valid_from_year=2017,
        )
        manager.create(
            number=9,
            base_document=base_document,
            name='Работа с бытовыми, крупногабаритными отходами и БРТС.',
            base_description='Показатели формируются на основании предоставляемых актов по обследованию БРТС за отчетный период, подтверждающих представляемые ранее сведения о проводимой с БРТС работе.',
            weight=10,
            sub_components_display_type=1,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=10,
            base_document=base_document,
            name='Выполнение региональной программы капитального ремонта.',
            base_description='Снижение балла основывается на количестве МКД и нежилых объектов в районе, взнос оплаты по которым не выполнен на 100%. Снижение балла основывается на количестве исходно-разрешительной документации (ИРД) по району, количество сдачи которых не выполнено на 100%.',
            weight=10,
            sub_components_display_type=2,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=11,
            base_document=base_document,
            name='Работа с кадрами ГБУ "Жилищник" районов, включая показатель набора численности по данным АИС «Бюджетный учет».',
            base_description='Показатель формируется по данным из аналитического портала Облачной бухгалтерии.',
            weight=10,
            sub_components_display_type=2,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=12,
            base_document=base_document,
            name='Задолженность населения и валовый сбор платежей за коммунальные услуги.',
            base_description='Показатель формируется по еженедельным отчетам ГКУ "Дирекция ЖКХиБ САО" в рамках подготовки к тепловой комиссии на основании базы АСУ ЕИРЦ.',
            weight=10,
            sub_components_display_type=1,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=13,
            base_document=base_document,
            name='Задолженность управляющих, эксплуатирующих и подведомственных организаций перед поставщиками услуг и ресурсов.',
            base_description='Данный показатель взят на основании еженедельных отчетов АО "Мосводоканал", АО "Мосгаз", ПАО "Мосэнергосбыт", ПАО МОЭК и лифтовых компаний и формируется отдельно по ГБУ и частным УО.',
            weight=10,
            sub_components_display_type=1,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=14,
            base_document=base_document,
            name='Санитарное и техническое состояние жилых домов, административных зданий и сооружений (инженерные системы МКД, работа ОДС, лифтовое оборудование и другие системы).',
            base_description='Исходные данные для расчета рейтинга, в части работы ОДС и представления отчетов по неисправностям  лифтового оборудования и очистке кровель, основываются на:\n1) Своевременном представлении отчетов (согласно факсограмме №6-7-139/7, № 6-7-5125/6, 6-7-310/7, 6-7-274/7;\n2) Проверок ОДС;\n3) Представлении районами необходимых материалов устранения нарушений, выявленных при проверке ОДС.',
            weight=10,
            sub_components_display_type=1,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=15,
            base_document=base_document,
            name='Проведение общих собраний собственников помещений МКД и качество оформления протоколов, а также проведения конкурсов по выбору управляющих организаций.',
            base_description='Проведение собраний с жителями жилых домов в районах округа.',
            weight=10,
            sub_components_display_type=1,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=16,
            base_document=base_document,
            name='Санитарное и техническое состояние территории округа и объектов инфраструктуры.',
            base_description='Показатель формируется на основании еженедельных отчетов СМЦ САО.',
            weight=10,
            sub_components_display_type=2,
            valid_from_month=1,
            valid_from_year=2016,
        )
        manager.create(
            number=17,
            base_document=base_document,
            name='Санитарное и техническое состояние бытовых городков и баз хранения, а также других строений и территорий, находящихся на балансе ГБУ "Жилищник" районов.',
            weight=10,
            sub_components_display_type=1,
            valid_from_month=2,
            valid_from_year=2017,
        )

    def add_monthly_rating_2017_2(self, schema_editor):
        self.get_model("ratings", "MonthlyRating").objects.create(
            base_document=self.get_model("ratings",
                                         "BaseDocument").objects.get(
                description='Распоряжение префектуры САО от 08.09.2016 №532'),
            is_negotiated=False,
            is_approved=False,
            year=2017,
            month=2,
            signer_text=self.get_model("ratings", "SignerText").objects.get(
                text='УТВЕРЖДАЮ\nПервый заместитель префекта\nСеверного административного округа\nгорода Москвы\n\n___________________А.А.Велиховский'),
        )
    initial = True

    dependencies = [
        ('employees', '0004_auto_20170220_2234'),
        ('map', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.IntegerField(choices=[(1, 'Основной'), (2, 'Показатель')], verbose_name='Тип документа')),
                ('description', models.TextField(unique=True, verbose_name='Наименование')),
                ('description_imp', models.TextField(unique=True, verbose_name='Наименование (повелительное)')),
            ],
            options={
                'verbose_name': 'Документ-основание',
                'verbose_name_plural': 'Документы-основания',
            },
        ),
        migrations.CreateModel(
            name='MonthlyRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_negotiated', models.BooleanField(default=False, verbose_name='Согласован')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Утвержден')),
                ('year', models.SmallIntegerField(choices=[(2016, 2016), (2017, 2017), (2018, 2018)], verbose_name='Год')),
                ('month', models.SmallIntegerField(choices=[(1, 'Январь'), (2, 'Февраль'), (3, 'Март'), (4, 'Апрель'), (5, 'Май'), (6, 'Июнь'), (7, 'Июль'), (8, 'Август'), (9, 'Сентябрь'), (10, 'Октябрь'), (11, 'Ноябрь'), (12, 'Декабрь')], verbose_name='Месяц')),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='employees.PrefectureEmployee', verbose_name='Утвердивший сотрудник')),
                ('base_document', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ratings.BaseDocument', verbose_name='Документ-основание')),
            ],
            options={
                'verbose_name': 'Месячный рейтинг',
                'ordering': ('-year', '-month'),
                'verbose_name_plural': 'Месячные рейтинги',
            },
        ),
        migrations.CreateModel(
            name='MonthlyRatingComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('additional_description', models.TextField(blank=True, null=True, verbose_name='Дополнительное описание')),
                ('negotiator_comment', models.TextField(blank=True, null=True, verbose_name='Комментарий согласовывающего')),
                ('region_comment', models.TextField(blank=True, null=True, verbose_name='Комментарий района')),
                ('monthly_rating', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='components', to='ratings.MonthlyRating', verbose_name='Месячный рейтинг')),
            ],
            options={
                'verbose_name': 'Компонент месячного рейтинга',
                'verbose_name_plural': 'Компоненты месячного рейтинга',
            },
        ),
        migrations.CreateModel(
            name='MonthlyRatingSubComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('date', models.DateField(blank=True, null=True)),
                ('description', models.TextField()),
                ('best_type', models.SmallIntegerField(choices=[(1, 'мин'), (2, 'макс')])),
                ('document', models.FileField(upload_to='uploads/%Y/%m/%d/documents/')),
                ('monthly_rating_component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_sub_components', to='ratings.MonthlyRatingComponent')),
                ('responsible', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='employees.PrefectureEmployee')),
            ],
            options={
                'verbose_name': 'Подкомпонент месячного рейтинга',
                'verbose_name_plural': 'Подкомпоненты месячных рейтингов',
            },
        ),
        migrations.CreateModel(
            name='MonthlyRatingSubComponentValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_average', models.BooleanField(default=False)),
                ('value', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('monthly_rating_sub_component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='ratings.MonthlyRatingSubComponent')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='map.Region')),
            ],
            options={
                'verbose_name': 'Значение подкомпонента месячного рейтинга',
                'verbose_name_plural': 'Значения подкомпонентов месячных рейтингов',
            },
        ),
        migrations.CreateModel(
            name='RatingComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(verbose_name='№ п/п')),
                ('name', models.TextField(verbose_name='Наименование')),
                ('base_description', models.TextField(blank=True, null=True, verbose_name='Базовое описание')),
                ('weight', models.SmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], verbose_name='Вес')),
                ('sub_components_display_type', models.SmallIntegerField(choices=[(1, 'десятичное число'), (2, 'процент')], verbose_name='Тип отображения подкомпонентов')),
                ('valid_from_month', models.SmallIntegerField(choices=[(1, 'Январь'), (2, 'Февраль'), (3, 'Март'), (4, 'Апрель'), (5, 'Май'), (6, 'Июнь'), (7, 'Июль'), (8, 'Август'), (9, 'Сентябрь'), (10, 'Октябрь'), (11, 'Ноябрь'), (12, 'Декабрь')], db_index=True, verbose_name='Действует с месяца')),
                ('valid_from_year', models.SmallIntegerField(choices=[(2016, 2016), (2017, 2017), (2018, 2018)], db_index=True, verbose_name='Действует с года')),
                ('valid_to_month', models.SmallIntegerField(blank=True, choices=[(1, 'Январь'), (2, 'Февраль'), (3, 'Март'), (4, 'Апрель'), (5, 'Май'), (6, 'Июнь'), (7, 'Июль'), (8, 'Август'), (9, 'Сентябрь'), (10, 'Октябрь'), (11, 'Ноябрь'), (12, 'Декабрь')], db_index=True, null=True, verbose_name='Действует по месяц(включительно)')),
                ('valid_to_year', models.SmallIntegerField(blank=True, choices=[(2016, 2016), (2017, 2017), (2018, 2018)], db_index=True, null=True, verbose_name='Действует по год(включительно)')),
                ('base_document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ratings.BaseDocument', verbose_name='Документ-основание')),
                ('responsible', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='employees.PrefectureEmployee', verbose_name='Ответственный (базовый)')),
            ],
            options={
                'verbose_name': 'Базовый компонент рейтинга',
                'ordering': ('number',),
                'verbose_name_plural': 'Базовые компоненты рейтинга',
            },
        ),
        migrations.CreateModel(
            name='SignerText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(unique=True, verbose_name='Текст')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активный')),
            ],
            options={
                'verbose_name': 'Текст подписанта',
                'verbose_name_plural': 'Тексты подписантов',
            },
        ),
        migrations.AddField(
            model_name='monthlyratingcomponent',
            name='rating_component',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ratings.RatingComponent', verbose_name='Базовый компонент рейтинга'),
        ),
        migrations.AddField(
            model_name='monthlyratingcomponent',
            name='responsible',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='employees.PrefectureEmployee', verbose_name='Ответственный'),
        ),
        migrations.AddField(
            model_name='monthlyrating',
            name='signer_text',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ratings.SignerText', verbose_name='Текст подписанта'),
        ),
        migrations.AlterUniqueTogether(
            name='monthlyratingsubcomponentvalue',
            unique_together=set([('region', 'monthly_rating_sub_component')]),
        ),
        migrations.AlterUniqueTogether(
            name='monthlyratingsubcomponent',
            unique_together=set([('name', 'date')]),
        ),
        migrations.AlterUniqueTogether(
            name='monthlyratingcomponent',
            unique_together=set([('monthly_rating', 'rating_component')]),
        ),
        migrations.AlterUniqueTogether(
            name='monthlyrating',
            unique_together=set([('year', 'month')]),
        ),
        migrations.RunPython(add_base_document),
        migrations.RunPython(add_signer_text),
        migrations.RunPython(add_monthly_rating_2017_2),
        migrations.RunPython(add_base_rating_components),
    ]
